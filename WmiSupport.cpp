#ifdef __cplusplus
extern "C"
{
#endif
#include <wdm.h>
#include <acpitabl.h>
#include <acpiioct.h>
#include "AcpiSmiWdmCommon.h"

#ifdef __cplusplus
}
#endif

extern UNICODE_STRING GlobalRegistryPath;

NTSTATUS 
ACPI_Wmi_DeRegistration(
  IN PDEVICE_EXTENSION pDevExt
)
{
  PAGED_CODE();

  return IoWMIRegistrationControl(pDevExt->NextStackDevice,
    WMIREG_ACTION_DEREGISTER);
}

#define MOFRESOURCENAME L"MofResourceName"


void _CreateInstaName(OUT PUNICODE_STRING )
{
  //
  // note: BSOD: attempt to write read-only memmory
  //
  /*
  InstanceName->MaximumLength = 0x30;
  InstanceName->Buffer = (PWCH)ExAllocatePoolWithTag(PagedPool, InstanceName->MaximumLength, 'StaS');
  RtlInitUnicodeString(InstanceName, L"AcpiSim");
  */
}
NTSTATUS
QueryRegInfo(
  IN PDEVICE_OBJECT     DeviceObject,
  OUT ULONG             *RegFlags,
  OUT PUNICODE_STRING   Instancename ,
  OUT PUNICODE_STRING   *RegistryPath,
  OUT PUNICODE_STRING   MofResoureName,
  OUT PDEVICE_OBJECT    *Pdo
)
{

  KdPrint(("Enter QueryRegInfo \n"));
  PDEVICE_EXTENSION pDevExt = (PDEVICE_EXTENSION)DeviceObject->DeviceExtension;
  *RegFlags = WMIREG_FLAG_INSTANCE_PDO;
  *RegistryPath = &GlobalRegistryPath;
  *Pdo = pDevExt->PDO;
  _CreateInstaName(Instancename);
  //
  // The MOFRESOURCENAME must be generated by *.rc file
  // with 'MOFDATA' ==> format: MOFRESOURCENAME MOFDATA **.mof
  // later, 
  // We can use 
  // 'WMI Code Creator utility ' to see a class Wmi42 under namespace root\WMI,
  //
  RtlInitUnicodeString(MofResoureName, MOFRESOURCENAME);
  KdPrint(("Leave QueryRegInfo \n"));
  return STATUS_SUCCESS;
}


NTSTATUS
QueryDataBlock(
  IN PDEVICE_OBJECT       fdo,
  IN PIRP                 irp,
  IN ULONG                Guidindex,
  IN ULONG                InstanceIndex,
  IN ULONG                InstanceCount,
  IN OUT PULONG           instlength,
  IN ULONG                OutBufferSize,
  OUT PUCHAR              Buffer
)
{
#define MAX_TRY_SIZE 10
  NTSTATUS  Status = STATUS_SUCCESS;
  KdPrint(("Enter QueryDataBlock \n"));
  KdPrint(("output support size = %d, InstanceCount = %d, InstanceIndex = %d GuidIndex = %d\n", OutBufferSize, InstanceCount, InstanceIndex, Guidindex));
  PAGED_CODE();

  if (!instlength || OutBufferSize == 0)
    return WmiCompleteRequest(fdo, irp, STATUS_BUFFER_TOO_SMALL, sizeof(ULONG), IO_NO_INCREMENT);

  PDEVICE_EXTENSION pDevExt = (PDEVICE_EXTENSION)fdo->DeviceExtension;
  PULONG pValue = (PULONG)Buffer;

  //
  // for WMI42 class, hard-code returns 'TheAnswer' is 0x02
  //
  *pValue = 0x2;
  instlength[0] = sizeof(ULONG);

  Status = WmiCompleteRequest(
                  fdo,
                  irp,
                  STATUS_SUCCESS,
                  sizeof(ULONG),
                  IO_NO_INCREMENT);
  KdPrint(("Leave QueryDataBlock \n"));
  return Status;
}




